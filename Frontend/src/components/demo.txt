import React, { useState, useEffect } from "react";
import { IoInformationCircleOutline, IoGridOutline, IoListOutline, IoCalendarOutline } from "react-icons/io5";
import axios from "axios";

const Classroom = () => {
  const [classrooms, setClassrooms] = useState([]);
  const [allSchedules, setAllSchedules] = useState([]);
  const [groups, setGroups] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");
  const [viewMode, setViewMode] = useState("table");

  const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  const currentDay = daysOfWeek[new Date().getDay()];
  
  const timeSlots = [
    { id: 1, label: "7:00 - 9:00", start: "07:00", end: "09:00" },
    { id: 2, label: "9:00 - 11:00", start: "09:00", end: "11:00" },
    { id: 3, label: "11:00 - 13:00", start: "11:00", end: "13:00" },
    { id: 4, label: "13:00 - 15:00", start: "13:00", end: "15:00" },
    { id: 5, label: "15:00 - 17:00", start: "15:00", end: "17:00" }
  ];

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch classrooms
        const { data: { data: classroomData = [] } } = await axios.get("http://localhost:3000/api/get_classrooms");
        setClassrooms(classroomData);

        // Setup groups
        const groupIds = [1, 2, 3, 4, 5];
        const groupsData = groupIds.map(id => ({ id, name: `Group ${id}` }));
        setGroups(groupsData);

        // Fetch schedules for all groups
        const allGroupSchedules = await Promise.all(
          groupIds.map(async (groupId) => {
            const { data: { schedules = [] } } = await axios.post(
              "http://localhost:3000/api/fetch_schedule",
              { group_id: groupId }
            );
            return schedules.map(schedule => ({ ...schedule, group_id: groupId }));
          })
        );
        
        setAllSchedules(allGroupSchedules.flat());
        setLoading(false);
      } catch (err) {
        console.error("Error fetching data:", err);
        setLoading(false);
        // TODO: Add dummy data fallback
      }
    };

    fetchData();
  }, []);

  const getFilteredSchedules = () => {
    const daySchedules = allSchedules.filter(schedule => schedule.day_of_week === currentDay);
    return activeTab !== "all" 
      ? daySchedules.filter(schedule => schedule.group_id.toString() === activeTab)
      : daySchedules;
  };

  const getClassroomStatus = (classroomId, timeSlot) => {
    const filteredSchedules = getFilteredSchedules();
    const [startHour, startMinute] = timeSlot.start.split(":").map(Number);
    const [endHour, endMinute] = timeSlot.end.split(":").map(Number);
    
    const slotStartMinutes = startHour * 60 + startMinute;
    const slotEndMinutes = endHour * 60 + endMinute;

    const occupyingSchedule = filteredSchedules.find(schedule => {
      if (parseInt(schedule.classroom_id) !== parseInt(classroomId)) return false;
      
      const [scheduleStartHour, scheduleStartMinute] = schedule.start_time.split(":").map(Number);
      const [scheduleEndHour, scheduleEndMinute] = schedule.end_time.split(":").map(Number);
      
      const scheduleStartMinutes = scheduleStartHour * 60 + scheduleStartMinute;
      const scheduleEndMinutes = scheduleEndHour * 60 + scheduleEndMinute;
      
      return slotStartMinutes < scheduleEndMinutes && slotEndMinutes > scheduleStartMinutes;
    });

    return occupyingSchedule
      ? {
          occupied: true,
          course: occupyingSchedule.course_name,
          teacher: occupyingSchedule.teacher_name,
          group: occupyingSchedule.group_name,
          startTime: occupyingSchedule.start_time,
          endTime: occupyingSchedule.end_time,
        }
      : { occupied: false };
  };

  const getAllClassroomSchedules = () => classrooms.map(classroom => ({
    ...classroom,
    schedules: getFilteredSchedules().filter(schedule => parseInt(schedule.classroom_id) === classroom.id)
  }));

  if (loading) {
    return (
      <div className="h-screen w-full flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center">
          <div className="w-8 h-8 border-4 border-gray-200 border-t-gray-600 rounded-full animate-spin mb-2"></div>
          <p className="text-gray-500 font-medium">Loading classroom data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen w-full overflow-auto bg-gray-50 font-sans">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-white bg-opacity-80 backdrop-blur-lg border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <div className="flex items-center space-x-2">
            <h1 className="text-xl font-semibold text-gray-900">Classrooms</h1>
            <IoInformationCircleOutline className="text-gray-400" />
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center text-sm text-gray-500">
              <IoCalendarOutline className="mr-2" />
              {currentDay}, {new Date().toLocaleDateString()}
            </div>
            <button className="px-4 py-2 bg-blue-500 text-white text-sm rounded-full hover:bg-blue-600 transition-colors font-medium">
              Book a Classroom
            </button>
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="sticky top-16 z-10 bg-white bg-opacity-80 backdrop-blur-lg border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex justify-between">
            <div className="flex overflow-x-auto hide-scrollbar">
              <button
                className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${
                  activeTab === "all"
                    ? "border-b-2 border-blue-500 text-blue-500"
                    : "text-gray-500 hover:text-gray-800"
                }`}
                onClick={() => setActiveTab("all")}
              >
                All Groups
              </button>

              {groups.map((group) => (
                <button
                  key={group.id}
                  className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${
                    activeTab === group.id.toString()
                      ? "border-b-2 border-blue-500 text-blue-500"
                      : "text-gray-500 hover:text-gray-800"
                  }`}
                  onClick={() => setActiveTab(group.id.toString())}
                >
                  {group.name}
                </button>
              ))}
            </div>

            {/* View Toggle */}
            <div className="flex items-center">
              <div className="flex bg-gray-100 rounded-full p-1">
                <button
                  className={`p-1.5 rounded-full ${
                    viewMode === "table"
                      ? "bg-white text-blue-600 shadow-sm"
                      : "text-gray-500 hover:text-gray-800"
                  }`}
                  onClick={() => setViewMode("table")}
                >
                  <IoListOutline className="text-lg" />
                </button>
                <button
                  className={`p-1.5 rounded-full ${
                    viewMode === "card"
                      ? "bg-white text-blue-600 shadow-sm"
                      : "text-gray-500 hover:text-gray-800"
                  }`}
                  onClick={() => setViewMode("card")}
                >
                  <IoGridOutline className="text-lg" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Body */}
      <div className="max-w-7xl mx-auto px-6 py-6">
        <div className="mb-6 flex justify-between items-center">
          <h2 className="text-lg font-semibold text-gray-800">
            {activeTab === "all" ? "All Groups" : `Group ${activeTab}`} - Today's Schedule
          </h2>

          <div className="flex items-center text-sm text-gray-500 space-x-4">
            <div className="flex items-center">
              <span className="inline-block w-3 h-3 bg-green-400 rounded-full mr-1.5"></span>
              <span>Available</span>
            </div>
            <div className="flex items-center">
              <span className="inline-block w-3 h-3 bg-red-400 rounded-full mr-1.5"></span>
              <span>Occupied</span>
            </div>
          </div>
        </div>

        {/* Table View */}
        {viewMode === "table" && (
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full table-fixed divide-y divide-gray-200">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-32">
                      Classroom
                    </th>
                    {timeSlots.map((slot) => (
                      <th
                        key={slot.id}
                        className="py-3 px-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 w-32"
                      >
                        {slot.label}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {classrooms.map((classroom) => (
                    <tr key={classroom.id}>
                      <td className="py-3 px-4 border-r border-gray-200 h-24">
                        <div className="font-medium text-gray-800">{classroom.name}</div>
                        <div className="text-xs text-gray-500">{classroom.type}</div>
                      </td>
                      {timeSlots.map((slot) => {
                        const status = getClassroomStatus(classroom.id, slot);
                        return (
                          <td
                            key={`${classroom.id}-${slot.id}`}
                            className={`py-2 px-2 border-r border-gray-200 h-24 ${
                              status.occupied 
                                ? "bg-red-50" 
                                : "bg-green-50"
                            }`}
                          >
                            <div className="h-full flex flex-col justify-center">
                              {status.occupied ? (
                                <div className="text-xs">
                                  <div className="font-medium text-gray-800 truncate">{status.course}</div>
                                  <div className="text-blue-600">{status.group}</div>
                                  <div className="text-gray-500">
                                    {status.startTime} - {status.endTime}
                                  </div>
                                  <div className="text-gray-500 italic truncate">{status.teacher}</div>
                                </div>
                              ) : (
                                <div className="text-xs text-green-600 font-medium text-center">Available</div>
                              )}
                            </div>
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Card View */}
        {viewMode === "card" && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {getAllClassroomSchedules().map((classroom) => (
              <div
                key={classroom.id}
                className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden transition-shadow hover:shadow-md"
              >
                <div className="px-4 py-3 border-b border-gray-100 bg-gray-50">
                  <h3 className="font-medium text-gray-800">{classroom.name}</h3>
                  <p className="text-xs text-gray-500">{classroom.type}</p>
                </div>

                <div className="p-4 h-64 overflow-y-auto">
                  {classroom.schedules.length > 0 ? (
                    <div className="space-y-3">
                      {classroom.schedules.map((schedule, idx) => (
                        <div
                          key={idx}
                          className="p-3 rounded-xl bg-blue-50 border border-blue-100"
                        >
                          <div className="flex justify-between items-start mb-1">
                            <span className="font-medium text-gray-800 truncate max-w-xs">
                              {schedule.course_name}
                            </span>
                            <span className="text-xs px-2 py-0.5 bg-blue-100 rounded-full text-blue-600 whitespace-nowrap ml-1">
                              {schedule.group_name}
                            </span>
                          </div>
                          <div className="text-xs text-gray-500 mb-1 truncate">{schedule.teacher_name}</div>
                          <div className="text-sm font-medium text-gray-600">
                            {schedule.start_time} - {schedule.end_time}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="h-full flex flex-col justify-center items-center">
                      <p className="text-sm text-gray-500">No classes scheduled today</p>
                      <p className="text-xs text-green-600 mt-1 font-medium">Available all day</p>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>        )}
      </div>
    </div>
  );
};

export default Classroom;